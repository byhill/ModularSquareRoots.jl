using ModularSquareRoots
using Test

@testset "ModularSquareRoots.jl" begin

    @testset "sqrtmodprime" begin
        # mod 2
        @test sort(sqrtmodprime(0, 2)) == [0]
        @test sort(sqrtmodprime(1, 2)) == [1]

        # mod3
        @test sort(sqrtmodprime(0, 3)) == [0]
        @test sort(sqrtmodprime(1, 3)) == [1, 2]
        @test isempty(sqrtmodprime(2, 3))

        @test sqrtmodprime(Int8(125), Int8(127)) isa Vector{Int8}
        @test sqrtmodprime(Int8(125), Int8(113)) isa Vector{Int8}
        @test sqrtmodprime(zero(Int8), Int8(113)) isa Vector{Int8}
        @test isempty(sqrtmodprime(Int8(125), Int8(127)))
        @test isempty(sqrtmodprime(Int8(125), Int8(113)))
        @test sort(sqrtmodprime(Int8(124), Int8(127))) == [39, 88]
        @test sort(sqrtmodprime(Int8(126), Int8(113))) == [37, 76]
        @test sqrtmodprime(zero(Int8), Int8(113)) == [0]

        @test sqrtmodprime(UInt16(1266), UInt16(65521)) isa Vector{UInt16}
        @test sqrtmodprime(UInt16(1267), UInt16(65521)) isa Vector{UInt16}
        @test isempty(sqrtmodprime(UInt16(1266), UInt16(65521)))
        @test sort(sqrtmodprime(UInt16(1267), UInt16(65521))) == [16185, 49336]

        @test sort(sqrtmodprime(13, 10^16 + 61)) == [353670011380822, 9646329988619239]
        @test sort(sqrtmodprime(483918293829192838, 5920394019203941009)) == [835763758593320363, 5084630260610620646]
        @test isempty(sqrtmodprime(483918293829192839, 5920394019203941009))

        @test sort(sqrtmodprime(BigInt(34789074890172839471892043422), BigInt(10000000000000000000000000120989089031284027))) == [4665676551146615114818820594052041583630135, 5334323448853384885181179526937047447653892]
        @test sort(sqrtmodprime(32138901234789074890172839471892043424434, 57348293847897092349345713247809314579049)) == [25770511472149243631404498078881896545120, 31577782375747848717941215168927418033929]
    end

    @testset "sqrtmod" begin
        @test_throws DomainError sqrtmod(4, 0)
        @test_throws DomainError sqrtmod(UInt64(4), zero(UInt64))
        @test_throws DomainError sqrtmod(12, -1)

        @test sqrtmod(Int16(4), one(Int32)) isa Vector{Int32}
        @test sqrtmod(4, one(Int128)) == [0]

        @test sort(sqrtmod(0, 2)) == [0]
        @test sort(sqrtmod(1, 2)) == [1]

        @test sort(sqrtmod(0, 3)) == [0]
        @test sort(sqrtmod(1, 3)) == [1, 2]
        @test isempty(sqrtmod(2, 3))

        @test sqrtmod(UInt128(1240), Int128(289032)) isa Vector{UInt128}
        @test sort(sqrtmod(UInt128(1240), Int128(289032))) == [10712, 37460, 107056, 133804, 155228, 181976, 251572, 278320]
        @test sort(sqrtmod(13, 1234566)) == [95465, 232639, 533909, 563483, 671083, 700657, 1001927, 1139101]

        arr = [10, 12669920, 18617050, 18813070, 27410120, 31286980, 31483000, 40080050, 50100040, 58697090, 58893110, 62769970, 71367020, 71563040, 77510170, 90180080, 90180100, 102850010, 108797140, 108993160, 117590210, 121467070, 121663090, 130260140, 140280130, 148877180, 149073200, 152950060, 161547110, 161743130, 167690260, 180360170, 180360190, 193030100, 198977230, 199173250, 207770300, 211647160, 211843180, 220440230, 230460220, 239057270, 239253290, 243130150, 251727200, 251923220, 257870350, 270540260, 270540280, 283210190, 289157320, 289353340, 297950390, 301827250, 302023270, 310620320, 320640310, 329237360, 329433380, 333310240, 341907290, 342103310, 348050440, 360720350, 360720370, 373390280, 379337410, 379533430, 388130480, 392007340, 392203360, 400800410, 410820400, 419417450, 419613470, 423490330, 432087380, 432283400, 438230530, 450900440, 450900460, 463570370, 469517500, 469713520, 478310570, 482187430, 482383450, 490980500, 501000490, 509597540, 509793560, 513670420, 522267470, 522463490, 528410620, 541080530, 541080550, 553750460, 559697590, 559893610, 568490660, 572367520, 572563540, 581160590, 591180580, 599777630, 599973650, 603850510, 612447560, 612643580, 618590710, 631260620, 631260640, 643930550, 649877680, 650073700, 658670750, 662547610, 662743630, 671340680, 681360670, 689957720, 690153740, 694030600, 702627650, 702823670, 708770800, 721440710, 721440730, 734110640, 740057770, 740253790, 748850840, 752727700, 752923720, 761520770, 771540760, 780137810, 780333830, 784210690, 792807740, 793003760, 798950890, 811620800, 811620820, 824290730, 830237860, 830433880, 839030930, 842907790, 843103810, 851700860, 861720850, 870317900, 870513920, 874390780, 882987830, 883183850, 889130980, 901800890]
        @test sqrtmod(100, 901800900) isa Vector{Int64}
        @test sort(sqrtmod(100, 901800900)) == arr
        @test sqrtmod(Int8(100), Int32(901800900)) isa Vector{Int32}
        @test sort(sqrtmod(Int8(100), Int32(901800900))) == arr
    end

end
